<?php

namespace App\Http\Controllers\User;

use App\Http\Responses\User\{{class}}Response;
use App\ProtectionLayers\Ensure{{class}}IdExists;
{{issetPossession}}
use App\ProtectionLayers\PreventTamperingOther{{class}};
{{endissetPossession}}
use App\Services\{{class}}\{{class}}Service;
use App\Http\Controllers\Controller;
use Imanghafoori\HeyMan\Facades\HeyMan;
use Imanghafoori\HeyMan\StartGuarding;

class {{class}}Controller extends Controller
{
    public function __construct()
    {
        Ensure{{class}}IdExists::install();
        {{issetPossession}}
        PreventTamperingOther{{class}}::install();
        {{endissetPossession}}

        resolve(StartGuarding::class)->start();
    }

    public function index()
    {
        ${{table}} = {{class}}Service::new ()->allWithRelation();
        return {{class}}Response::index(${{table}});
    }

    public function store()
    {
        $this->validateStoreForm(request());

        $inputs = request()->only();

        ${{name}} = {{class}}Service::new ()
            ->create($inputs)
            ->getOrSend([{{class}}Response::class, 'storeFailed']);

        return {{class}}Response::store(${{name}});
    }

    public function show($id)
    {
        HeyMan::checkPoint('Ensure{{class}}IdExists');
        {{issetPossession}}
        HeyMan::checkPoint('PreventTamperingOther{{class}}');
        {{endissetPossession}}

        ${{name}} = {{class}}Service::new ()->findByIdWithRelation($id);

        return {{class}}Response::show(${{name}});
    }

    public function update($id)
    {
        HeyMan::checkPoint('Ensure{{class}}IdExists');
        {{issetPossession}}
        HeyMan::checkPoint('PreventTamperingOther{{class}}');
        {{endissetPossession}}

        $this->validateStoreForm(request());
        $inputs = request()->only();

        ${{name}} = {{class}}Service::make({{class}}Service::new ()->findByIdWithRelation($id))
            ->update($inputs)
            ->getOrSend([{{class}}Response::class, 'updateFailed']);

        return {{class}}Response::update(${{name}});
    }

    public function destroy($id)
    {
        HeyMan::checkPoint('Ensure{{class}}IdExists');
        {{issetPossession}}
        HeyMan::checkPoint('PreventTamperingOther{{class}}');
        {{endissetPossession}}

        {{class}}Service::make({{class}}Service::new ()->findByIdWithRelation($id))->delete()
            ->getOrSend([{{class}}Response::class, 'destroyFailed']);

        return {{class}}Response::destroy();
    }
    protected function validateStoreForm($request)
    {
        return $request->validate([

        ]);
    }
}
